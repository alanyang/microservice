//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.Hidden = {
  'yes' : 1,
  'no' : 0
};
ttypes.AutoHidden = {
  'show' : 1,
  'hidden' : 0
};
ttypes.Status = {
  'no' : 0,
  'adding' : 1,
  'added' : 2
};
ttypes.Type = {
  'track' : 0,
  'notrack' : 1,
  'other' : 2
};
ttypes.AuditStatus = {
  'checking' : 0,
  'published' : 1,
  'rejected' : 2,
  'deleted' : 3
};
AuditInfo = module.exports.AuditInfo = function(args) {
  this.currentAuditor = null;
  this.auditor = null;
  if (args) {
    if (args.currentAuditor !== undefined && args.currentAuditor !== null) {
      this.currentAuditor = args.currentAuditor;
    }
    if (args.auditor !== undefined && args.auditor !== null) {
      this.auditor = args.auditor;
    }
  }
};
AuditInfo.prototype = {};
AuditInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.currentAuditor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.auditor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuditInfo.prototype.write = function(output) {
  output.writeStructBegin('AuditInfo');
  if (this.currentAuditor !== null && this.currentAuditor !== undefined) {
    output.writeFieldBegin('currentAuditor', Thrift.Type.STRING, 1);
    output.writeString(this.currentAuditor);
    output.writeFieldEnd();
  }
  if (this.auditor !== null && this.auditor !== undefined) {
    output.writeFieldBegin('auditor', Thrift.Type.STRING, 2);
    output.writeString(this.auditor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DotUser = module.exports.DotUser = function(args) {
  this.startDt = null;
  this.x = null;
  this.y = null;
  this.time = null;
  this.duration = null;
  this.width = null;
  this.height = null;
  this.showTitle = null;
  if (args) {
    if (args.startDt !== undefined && args.startDt !== null) {
      this.startDt = args.startDt;
    }
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.duration !== undefined && args.duration !== null) {
      this.duration = args.duration;
    }
    if (args.width !== undefined && args.width !== null) {
      this.width = args.width;
    }
    if (args.height !== undefined && args.height !== null) {
      this.height = args.height;
    }
    if (args.showTitle !== undefined && args.showTitle !== null) {
      this.showTitle = args.showTitle;
    }
  }
};
DotUser.prototype = {};
DotUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.startDt = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.x = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.y = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.time = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.duration = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.width = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.height = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BYTE) {
        this.showTitle = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DotUser.prototype.write = function(output) {
  output.writeStructBegin('DotUser');
  if (this.startDt !== null && this.startDt !== undefined) {
    output.writeFieldBegin('startDt', Thrift.Type.I16, 1);
    output.writeI16(this.startDt);
    output.writeFieldEnd();
  }
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.time);
    output.writeFieldEnd();
  }
  if (this.duration !== null && this.duration !== undefined) {
    output.writeFieldBegin('duration', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.duration);
    output.writeFieldEnd();
  }
  if (this.width !== null && this.width !== undefined) {
    output.writeFieldBegin('width', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.width);
    output.writeFieldEnd();
  }
  if (this.height !== null && this.height !== undefined) {
    output.writeFieldBegin('height', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.height);
    output.writeFieldEnd();
  }
  if (this.showTitle !== null && this.showTitle !== undefined) {
    output.writeFieldBegin('showTitle', Thrift.Type.BYTE, 8);
    output.writeByte(this.showTitle);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tag = module.exports.Tag = function(args) {
  this.title = null;
  this.cat = null;
  this.hidden = null;
  this.auth_hidden = null;
  this.user = null;
  this.status = null;
  this.type = null;
  this.auditInfo = null;
  this.auditStatus = null;
  this.dot_user = null;
  this.vid = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.cat !== undefined && args.cat !== null) {
      this.cat = args.cat;
    }
    if (args.hidden !== undefined && args.hidden !== null) {
      this.hidden = args.hidden;
    }
    if (args.auth_hidden !== undefined && args.auth_hidden !== null) {
      this.auth_hidden = args.auth_hidden;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = args.user;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.auditInfo !== undefined && args.auditInfo !== null) {
      this.auditInfo = new ttypes.AuditInfo(args.auditInfo);
    }
    if (args.auditStatus !== undefined && args.auditStatus !== null) {
      this.auditStatus = args.auditStatus;
    }
    if (args.dot_user !== undefined && args.dot_user !== null) {
      this.dot_user = new ttypes.DotUser(args.dot_user);
    }
    if (args.vid !== undefined && args.vid !== null) {
      this.vid = args.vid;
    }
  }
};
Tag.prototype = {};
Tag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.cat = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.hidden = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.auth_hidden = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.auditInfo = new ttypes.AuditInfo();
        this.auditInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.auditStatus = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.dot_user = new ttypes.DotUser();
        this.dot_user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.vid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tag.prototype.write = function(output) {
  output.writeStructBegin('Tag');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.cat !== null && this.cat !== undefined) {
    output.writeFieldBegin('cat', Thrift.Type.I16, 2);
    output.writeI16(this.cat);
    output.writeFieldEnd();
  }
  if (this.hidden !== null && this.hidden !== undefined) {
    output.writeFieldBegin('hidden', Thrift.Type.I32, 3);
    output.writeI32(this.hidden);
    output.writeFieldEnd();
  }
  if (this.auth_hidden !== null && this.auth_hidden !== undefined) {
    output.writeFieldBegin('auth_hidden', Thrift.Type.I32, 4);
    output.writeI32(this.auth_hidden);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 5);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 6);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 7);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.auditInfo !== null && this.auditInfo !== undefined) {
    output.writeFieldBegin('auditInfo', Thrift.Type.STRUCT, 8);
    this.auditInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.auditStatus !== null && this.auditStatus !== undefined) {
    output.writeFieldBegin('auditStatus', Thrift.Type.I32, 9);
    output.writeI32(this.auditStatus);
    output.writeFieldEnd();
  }
  if (this.dot_user !== null && this.dot_user !== undefined) {
    output.writeFieldBegin('dot_user', Thrift.Type.STRUCT, 10);
    this.dot_user.write(output);
    output.writeFieldEnd();
  }
  if (this.vid !== null && this.vid !== undefined) {
    output.writeFieldBegin('vid', Thrift.Type.STRING, 11);
    output.writeString(this.vid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


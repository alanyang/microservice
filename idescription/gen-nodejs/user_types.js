//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var auth_ttypes = require('./auth_types')


var ttypes = module.exports = {};
ttypes.Status = {
  'unactivated' : 0,
  'activated' : 1,
  'completed' : 2
};
User = module.exports.User = function(args) {
  this.email = null;
  this.role = null;
  this.hashedPassword = null;
  this.provider = null;
  this.salt = null;
  this.status = null;
  this.policyAgreed = null;
  this.activationCode = null;
  this.username = null;
  this.phone = null;
  this.location = null;
  this.password = null;
  if (args) {
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
    if (args.hashedPassword !== undefined && args.hashedPassword !== null) {
      this.hashedPassword = args.hashedPassword;
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
    if (args.salt !== undefined && args.salt !== null) {
      this.salt = args.salt;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.policyAgreed !== undefined && args.policyAgreed !== null) {
      this.policyAgreed = args.policyAgreed;
    }
    if (args.activationCode !== undefined && args.activationCode !== null) {
      this.activationCode = args.activationCode;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hashedPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.provider = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.salt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.policyAgreed = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.activationCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.location = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 2);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  if (this.hashedPassword !== null && this.hashedPassword !== undefined) {
    output.writeFieldBegin('hashedPassword', Thrift.Type.STRING, 3);
    output.writeString(this.hashedPassword);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.STRING, 4);
    output.writeString(this.provider);
    output.writeFieldEnd();
  }
  if (this.salt !== null && this.salt !== undefined) {
    output.writeFieldBegin('salt', Thrift.Type.STRING, 5);
    output.writeString(this.salt);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 6);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.policyAgreed !== null && this.policyAgreed !== undefined) {
    output.writeFieldBegin('policyAgreed', Thrift.Type.BOOL, 7);
    output.writeBool(this.policyAgreed);
    output.writeFieldEnd();
  }
  if (this.activationCode !== null && this.activationCode !== undefined) {
    output.writeFieldBegin('activationCode', Thrift.Type.STRING, 8);
    output.writeString(this.activationCode);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 9);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 10);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.location);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 12);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserException = module.exports.UserException = function(args) {
  Thrift.TException.call(this, "UserException")
  this.name = "UserException"
  this.errorCode = null;
  this.reason = null;
  if (args) {
    if (args.errorCode !== undefined && args.errorCode !== null) {
      this.errorCode = args.errorCode;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
Thrift.inherits(UserException, Thrift.TException);
UserException.prototype.name = 'UserException';
UserException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.errorCode = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserException.prototype.write = function(output) {
  output.writeStructBegin('UserException');
  if (this.errorCode !== null && this.errorCode !== undefined) {
    output.writeFieldBegin('errorCode', Thrift.Type.I16, 1);
    output.writeI16(this.errorCode);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 2);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

